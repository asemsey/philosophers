current status:
	LazyTester passes all cases...
	the structure of the project needs some cleaning up.
	check for min_meals == 0 maybe?
	find a list of test cases to check.
	make sure all the mutexes work correctly!!! no data races!!! -> helgrind/valgrind
	weird bug: philos die immediately after eating???

	[philosophers only start thinking after a certain amount of time has passed
	they should think first and then decide what to do.
	the algorithm is still a bit strange
	also make sure large numbers keep working with new changes.]

current to-do:
-	check data races
-	remove test stuff (makefile, unused)

ALGORITHM:
	(case eat == sleep)
	case odd:
		even wait for rest to eat
		1 wait for 2 eats
		then n/2 normal cycles (counter)
		then think and wait for eattime ms
		loop (step 2)
	case even:
		even wait for rest to eat
		then normal cycle
	(case eat != sleep)
		same start, no counter

---------------------------------------------------------------

allowed functions:
	memset printf write
	malloc free
	usleep gettimeofday
	pthread_create pthread_join pthread_detach
	pthread_mutex_init pthread_mutex_destroy
	pthread_mutex_lock pthread_mutex_unlock

usleep(1000) == 1 millisecond
1			second
1.000		milliseconds
1.000.000	microseconds

state:		0-sleep 1-eat 2-think

---------------------------------------------------------------
